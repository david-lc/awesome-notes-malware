package com.example.malwareapp;

import androidx.activity.result.ActivityResult;
import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.ContentValues;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class MainActivity extends AppCompatActivity {
    private ListView listview;
    private ArrayList<String> notesList;

    public static String RANDOM = "RANDPjLQtr9u6rx8DsLngw5zYWKYKctVIPRkjac6KzCuRAND";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        System.out.println(RANDOM);

        listview = (ListView) findViewById(R.id.listView);

        try {
            this.verifyRequirements();
        } catch (PackageManager.NameNotFoundException | IOException e) {
            e.printStackTrace();
        }
        this.startNotesManagerService();
        this.updateNotesList();
    }

    private void verifyRequirements() throws PackageManager.NameNotFoundException, IOException {
        // boolean isDebuggable = (getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;

        System.out.println("HASH: " + getString(R.string.crc));

        ApplicationInfo ai = getPackageManager().getApplicationInfo(getPackageName(), 0);
        ZipEntry dex = new ZipFile(ai.sourceDir).getEntry("classes.dex");

        // Anti-Tampering
        //boolean isTampered = dex.getCrc() != getString(R.string.hash);

        // Anti-debugging
        boolean isBeingDebugged = android.os.Debug.isDebuggerConnected();

        // Anti-backup
        boolean isBackupAllowed = (getApplicationInfo().flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0;

        boolean isVirtualized = Utils.hasGenyFiles() || Utils.hasEth0Interface() || Utils.hasQEmuProps(getApplicationContext()) ||
                Utils.hasPipes() || Utils.hasEmulatorBuild(getApplicationContext()) || Utils.isOperatorNameAndroid(getApplicationContext()) ||
                Utils.hasQEmuDrivers() || Utils.hasQEmuFiles() || Utils.hasTracerPid() || Utils.hasAppAnalysisPackage(getApplicationContext()) ||
                Utils.hasTaintClass() || Utils.detectsensor(getApplicationContext());


        if (isBeingDebugged || isBackupAllowed /* || isVirtualized */) {
            System.out.println("Â¡VM DETECTED! Application not running.");
            finishAffinity();
        }
    }

    @SuppressLint("Range")
    private void updateNotesList(){
        Cursor cursor = getContentResolver().query(Uri.parse("content://com.example.notesprovider/notes"), null, null, null, null);

        if(cursor.moveToFirst()) {
            notesList = new ArrayList<>();

            while (!cursor.isAfterLast()) {
                notesList.add(cursor.getString(cursor.getColumnIndex("title")));
                cursor.moveToNext();
            }

            ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, notesList);
            listview.setAdapter(adapter);
        }
    }

    public void startNotesManagerService(){
        Intent intent = new Intent(this, NotesManagerService.class);
        startService(intent);
    }

    public void startAddNoteActivity(View view){
        Intent intent = new Intent(this, AddNoteActivity.class);
        addNoteResultLauncher.launch(intent);
    }

    ActivityResultLauncher<Intent> addNoteResultLauncher = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(), new ActivityResultCallback<ActivityResult>() {
                @Override
                public void onActivityResult(ActivityResult result) {
                    if (result.getResultCode() == Activity.RESULT_OK){
                        Intent data = result.getData();
                        Bundle extras = data.getExtras();

                        String title = (String) extras.get("noteTitle");
                        String message = (String) extras.get("noteMessage");

                        ContentValues values = new ContentValues();

                        values.put(NotesProvider.TITLE_FIELD, title);
                        values.put(NotesProvider.MESSAGE_FIELD, message);

                        // inserting into database through content URI
                        getContentResolver().insert(NotesProvider.CONTENT_URI, values);

                        updateNotesList();

                        // displaying a toast message
                        Toast.makeText(getBaseContext(), "New note added", Toast.LENGTH_LONG).show();
                    }
                }
            }
    );
}